import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import { Request } from "express";
import { CustomerService } from "./customer.service";
import { CustomerControllerBase } from "./base/customer.controller.base";
import { Customer } from "./base/Customer";
import { CustomerWhereUniqueInput } from "./base/CustomerWhereUniqueInput";
import { AclFilterResponseInterceptor } from "src/interceptors/aclFilterResponse.interceptor";
import * as errors from "../errors";
import { CustomerFindManyArgs } from "./base/CustomerFindManyArgs";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "src/decorators/api-nested-query.decorator";

@swagger.ApiTags("customers")
@common.Controller("customers")
export class CustomerController extends CustomerControllerBase {
  constructor(
    protected readonly service: CustomerService,
    @nestAccessControl.InjectRolesBuilder()
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {
    super(service, rolesBuilder);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor, common.CacheInterceptor)
  @common.CacheKey("customers") // override the autogenerated cache key
  @common.CacheTTL(1800) // override default TTL
  @common.Get()
  @swagger.ApiOkResponse({ type: [Customer] })
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findManyCustomers(@common.Req() request: Request): Promise<Customer[]> {
    console.log("Calling findManyCustomers");
    const args = plainToClass(CustomerFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        address: {
          select: {
            id: true,
          },
        },
        createdAt: false,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        phone: true,
        updatedAt: false,
      },
    });
  }

  //@common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findCustomerById(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    const result = await this.service.findCustomerById(params.id);
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }
}
